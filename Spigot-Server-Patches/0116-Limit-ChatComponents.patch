From 2f57ecfed5a2273d7c95eb053decfaf0661ee228 Mon Sep 17 00:00:00 2001
From: LinsaFTW <25271111+linsaftw@users.noreply.github.com>
Date: Mon, 21 Jun 2021 03:29:33 -0300
Subject: [PATCH] Limit ChatComponents


diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
index 01c39b23..6e882bfb 100644
--- a/src/main/java/net/minecraft/server/IChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -40,17 +40,31 @@ public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
 
         public ChatSerializer() {}
 
-        public IChatBaseComponent a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public IChatBaseComponent a(String lastElement, JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             if (jsonelement.isJsonPrimitive()) {
                 return new ChatComponentText(jsonelement.getAsString());
             } else if (!jsonelement.isJsonObject()) {
                 if (jsonelement.isJsonArray()) {
                     JsonArray jsonarray = jsonelement.getAsJsonArray();
+
+                    // FlamePaper start - Limit ChatComponents
+                    if (jsonarray.size() > 16) {
+                        throw new JsonParseException("Too many ChatComponent array elements");
+                    }
+                    // FlamePaper end - Limit Chatcomponents
+
                     IChatBaseComponent ichatbasecomponent = null;
                     Iterator iterator = jsonarray.iterator();
 
                     while (iterator.hasNext()) {
                         JsonElement jsonelement1 = (JsonElement) iterator.next();
+
+                        // FlamePaper start - Limit ChatComponents
+                        if (jsonelement.isJsonArray()) {
+                            throw new JsonParseException("Stacked ChatComponent array");
+                        }
+                        // FlamePaper end - Limit Chatcomponents
+
                         IChatBaseComponent ichatbasecomponent1 = this.a(jsonelement1, (Type) jsonelement1.getClass(), jsondeserializationcontext);
 
                         if (ichatbasecomponent == null) {
@@ -75,10 +89,23 @@ public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
 
                     if (jsonobject.has("with")) {
                         JsonArray jsonarray1 = jsonobject.getAsJsonArray("with");
+
+                        // FlamePaper start - Limit ChatComponents
+                        if (jsonarray1.size() > 16) {
+                            throw new JsonParseException("Too many ChatComponent array elements in with");
+                        }
+                        // FlamePaper end - Limit Chatcomponents
+
+                        // FlamePaper start - Limit ChatComponents
+                        if (lastElement.equals("with")) {
+                            throw new JsonParseException("Stacked with ChatComponent element");
+                        }
+                        // FlamePaper end - Limit Chatcomponents
+
                         Object[] aobject = new Object[jsonarray1.size()];
 
                         for (int i = 0; i < aobject.length; ++i) {
-                            aobject[i] = this.a(jsonarray1.get(i), type, jsondeserializationcontext);
+                            aobject[i] = this.a("with", jsonarray1.get(i), type, jsondeserializationcontext);
                             if (aobject[i] instanceof ChatComponentText) {
                                 ChatComponentText chatcomponenttext = (ChatComponentText) aobject[i];
 
@@ -114,12 +141,24 @@ public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
                 if (jsonobject.has("extra")) {
                     JsonArray jsonarray2 = jsonobject.getAsJsonArray("extra");
 
+                    // FlamePaper start - Limit ChatComponents
+                    if (jsonarray2.size() > 16) {
+                        throw new JsonParseException("Too many ChatComponent array elements in extra");
+                    }
+                    // FlamePaper end - Limit Chatcomponents
+
+                    // FlamePaper start - Limit ChatComponents
+                    if (lastElement.equals("extra")) {
+                        throw new JsonParseException("Stacked extra ChatComponent element");
+                    }
+                    // FlamePaper end - Limit Chatcomponents
+
                     if (jsonarray2.size() <= 0) {
                         throw new JsonParseException("Unexpected empty array of components");
                     }
 
                     for (int j = 0; j < jsonarray2.size(); ++j) {
-                        ((IChatBaseComponent) object).addSibling(this.a(jsonarray2.get(j), type, jsondeserializationcontext));
+                        ((IChatBaseComponent) object).addSibling(this.a("extra", jsonarray2.get(j), type, jsondeserializationcontext));
                     }
                 }
 
@@ -128,6 +167,10 @@ public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
             }
         }
 
+        public IChatBaseComponent a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            return a(null, jsonelement, type, jsondeserializationcontext);
+        }
+
         private void a(ChatModifier chatmodifier, JsonObject jsonobject, JsonSerializationContext jsonserializationcontext) {
             JsonElement jsonelement = jsonserializationcontext.serialize(chatmodifier);
 
-- 
2.32.0

